"use strict";
var collection_1 = require('./utils/collection');
var tree_1 = require('./utils/tree');
var router_state_1 = require('./router_state');
var shared_1 = require('./shared');
var Observable_1 = require('rxjs/Observable');
var CannotRecognize = (function () {
    function CannotRecognize() {
    }
    return CannotRecognize;
}());
function recognize(rootComponentType, config, url) {
    try {
        var match_1 = new MatchResult(rootComponentType, config, [url.root], {}, url._root.children, [], shared_1.PRIMARY_OUTLET, null, url.root);
        var roots = constructActivatedRoute(match_1);
        var res_1 = new router_state_1.RouterStateSnapshot(roots[0], url.queryParams, url.fragment);
        return new Observable_1.Observable(function (obs) {
            obs.next(res_1);
            obs.complete();
        });
    }
    catch (e) {
        if (e instanceof CannotRecognize) {
            return new Observable_1.Observable(function (obs) { return obs.error(new Error("Cannot match any routes")); });
        }
        else {
            return new Observable_1.Observable(function (obs) { return obs.error(e); });
        }
    }
}
exports.recognize = recognize;
function constructActivatedRoute(match) {
    var activatedRoute = createActivatedRouteSnapshot(match);
    var children = match.leftOverUrl.length > 0 ?
        recognizeMany(match.children, match.leftOverUrl) : recognizeLeftOvers(match.children, match.lastUrlSegment);
    checkOutletNameUniqueness(children);
    children.sort(function (a, b) {
        if (a.value.outlet === shared_1.PRIMARY_OUTLET)
            return -1;
        if (b.value.outlet === shared_1.PRIMARY_OUTLET)
            return 1;
        return a.value.outlet.localeCompare(b.value.outlet);
    });
    return [new tree_1.TreeNode(activatedRoute, children)];
}
function recognizeLeftOvers(config, lastUrlSegment) {
    if (!config)
        return [];
    var mIndex = matchIndex(config, [], lastUrlSegment);
    return mIndex ? constructActivatedRoute(mIndex) : [];
}
function recognizeMany(config, urls) {
    return collection_1.flatten(urls.map(function (url) { return recognizeOne(config, url); }));
}
function createActivatedRouteSnapshot(match) {
    return new router_state_1.ActivatedRouteSnapshot(match.consumedUrlSegments, match.parameters, match.outlet, match.component, match.route, match.lastUrlSegment);
}
function recognizeOne(config, url) {
    var matches = match(config, url);
    for (var _i = 0, matches_1 = matches; _i < matches_1.length; _i++) {
        var match_2 = matches_1[_i];
        try {
            var primary = constructActivatedRoute(match_2);
            var secondary = recognizeMany(config, match_2.secondary);
            var res = primary.concat(secondary);
            checkOutletNameUniqueness(res);
            return res;
        }
        catch (e) {
            if (!(e instanceof CannotRecognize)) {
                throw e;
            }
        }
    }
    throw new CannotRecognize();
}
function checkOutletNameUniqueness(nodes) {
    var names = {};
    nodes.forEach(function (n) {
        var routeWithSameOutletName = names[n.value.outlet];
        if (routeWithSameOutletName) {
            var p = routeWithSameOutletName.urlSegments.map(function (s) { return s.toString(); }).join("/");
            var c = n.value.urlSegments.map(function (s) { return s.toString(); }).join("/");
            throw new Error("Two segments cannot have the same outlet name: '" + p + "' and '" + c + "'.");
        }
        names[n.value.outlet] = n.value;
    });
    return nodes;
}
function match(config, url) {
    var res = [];
    for (var _i = 0, config_1 = config; _i < config_1.length; _i++) {
        var r = config_1[_i];
        if (r.index) {
            res.push(createIndexMatch(r, [url], url.value));
        }
        else {
            var m = matchWithParts(r, url);
            if (m)
                res.push(m);
        }
    }
    return res;
}
function createIndexMatch(r, leftOverUrls, lastUrlSegment) {
    var outlet = r.outlet ? r.outlet : shared_1.PRIMARY_OUTLET;
    var children = r.children ? r.children : [];
    return new MatchResult(r.component, children, [], lastUrlSegment.parameters, leftOverUrls, [], outlet, r, lastUrlSegment);
}
function matchIndex(config, leftOverUrls, lastUrlSegment) {
    for (var _i = 0, config_2 = config; _i < config_2.length; _i++) {
        var r = config_2[_i];
        if (r.index) {
            return createIndexMatch(r, leftOverUrls, lastUrlSegment);
        }
    }
    return null;
}
function matchWithParts(route, url) {
    if (!route.path)
        return null;
    if ((route.outlet ? route.outlet : shared_1.PRIMARY_OUTLET) !== url.value.outlet)
        return null;
    var path = route.path.startsWith("/") ? route.path.substring(1) : route.path;
    if (path === "**") {
        var consumedUrl = [];
        var u = url;
        while (u) {
            consumedUrl.push(u.value);
            u = collection_1.first(u.children);
        }
        var last = consumedUrl[consumedUrl.length - 1];
        return new MatchResult(route.component, [], consumedUrl, last.parameters, [], [], shared_1.PRIMARY_OUTLET, route, last);
    }
    var parts = path.split("/");
    var positionalParams = {};
    var consumedUrlSegments = [];
    var lastParent = null;
    var lastSegment = null;
    var current = url;
    for (var i = 0; i < parts.length; ++i) {
        if (!current)
            return null;
        var p_1 = parts[i];
        var isLastSegment = i === parts.length - 1;
        var isLastParent = i === parts.length - 2;
        var isPosParam = p_1.startsWith(":");
        if (!isPosParam && p_1 != current.value.path)
            return null;
        if (isLastSegment) {
            lastSegment = current;
        }
        if (isLastParent) {
            lastParent = current;
        }
        if (isPosParam) {
            positionalParams[p_1.substring(1)] = current.value.path;
        }
        consumedUrlSegments.push(current.value);
        current = collection_1.first(current.children);
    }
    if (!lastSegment)
        throw "Cannot be reached";
    var p = lastSegment.value.parameters;
    var parameters = collection_1.merge(p, positionalParams);
    var secondarySubtrees = lastParent ? lastParent.children.slice(1) : [];
    var children = route.children ? route.children : [];
    var outlet = route.outlet ? route.outlet : shared_1.PRIMARY_OUTLET;
    return new MatchResult(route.component, children, consumedUrlSegments, parameters, lastSegment.children, secondarySubtrees, outlet, route, lastSegment.value);
}
var MatchResult = (function () {
    function MatchResult(component, children, consumedUrlSegments, parameters, leftOverUrl, secondary, outlet, route, lastUrlSegment) {
        this.component = component;
        this.children = children;
        this.consumedUrlSegments = consumedUrlSegments;
        this.parameters = parameters;
        this.leftOverUrl = leftOverUrl;
        this.secondary = secondary;
        this.outlet = outlet;
        this.route = route;
        this.lastUrlSegment = lastUrlSegment;
    }
    return MatchResult;
}());
//# sourceMappingURL=data:application/json;base64,