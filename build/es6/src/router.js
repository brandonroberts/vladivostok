import { ReflectiveInjector } from '@angular/core';
import { RouterOutletMap } from './router_outlet_map';
import { recognize } from './recognize';
import { resolve } from './resolve';
import { createRouterState } from './create_router_state';
import { createEmptyUrlTree } from './url_tree';
import { PRIMARY_OUTLET } from './shared';
import { createEmptyState, ActivatedRoute, advanceActivatedRoute } from './router_state';
import { createUrlTree } from './create_url_tree';
import { forEach, and, shallowEqual } from './utils/collection';
import { Observable } from 'rxjs/Observable';
import { Subject } from 'rxjs/Subject';
import 'rxjs/add/operator/map';
import 'rxjs/add/operator/scan';
import 'rxjs/add/operator/mergeMap';
import 'rxjs/add/operator/concat';
import 'rxjs/add/operator/concatMap';
import { of } from 'rxjs/observable/of';
import { forkJoin } from 'rxjs/observable/forkJoin';
export class NavigationStart {
    constructor(id, url) {
        this.id = id;
        this.url = url;
    }
}
export class NavigationEnd {
    constructor(id, url) {
        this.id = id;
        this.url = url;
    }
}
export class NavigationCancel {
    constructor(id, url) {
        this.id = id;
        this.url = url;
    }
}
export class NavigationError {
    constructor(id, url, error) {
        this.id = id;
        this.url = url;
        this.error = error;
    }
}
export class Router {
    constructor(rootComponentType, resolver, urlSerializer, outletMap, location, injector, config) {
        this.rootComponentType = rootComponentType;
        this.resolver = resolver;
        this.urlSerializer = urlSerializer;
        this.outletMap = outletMap;
        this.location = location;
        this.injector = injector;
        this.config = config;
        this.navigationId = 0;
        this.routerEvents = new Subject();
        this.currentUrlTree = createEmptyUrlTree();
        this.currentRouterState = createEmptyState(rootComponentType);
        this.setUpLocationChangeListener();
        this.navigateByUrl(this.location.path());
    }
    get routerState() {
        return this.currentRouterState;
    }
    get urlTree() {
        return this.currentUrlTree;
    }
    get events() {
        return this.routerEvents;
    }
    navigateByUrl(url) {
        const urlTree = this.urlSerializer.parse(url);
        return this.scheduleNavigation(urlTree, false);
    }
    resetConfig(config) {
        this.config = config;
    }
    dispose() { this.locationSubscription.unsubscribe(); }
    createUrlTree(commands, { relativeTo, queryParams, fragment } = {}) {
        const a = relativeTo ? relativeTo : this.routerState.root;
        return createUrlTree(a, this.currentUrlTree, commands, queryParams, fragment);
    }
    navigate(commands, extras = {}) {
        return this.scheduleNavigation(this.createUrlTree(commands, extras), false);
    }
    serializeUrl(url) { return this.urlSerializer.serialize(url); }
    parseUrl(url) { return this.urlSerializer.parse(url); }
    scheduleNavigation(url, pop) {
        const id = ++this.navigationId;
        this.routerEvents.next(new NavigationStart(id, url));
        return Promise.resolve().then((_) => this.runNavigate(url, false, id));
    }
    setUpLocationChangeListener() {
        this.locationSubscription = this.location.subscribe((change) => {
            return this.scheduleNavigation(this.urlSerializer.parse(change['url']), change['pop']);
        });
    }
    runNavigate(url, pop, id) {
        if (id !== this.navigationId) {
            this.routerEvents.next(new NavigationCancel(id, url));
            return Promise.resolve(false);
        }
        return new Promise((resolvePromise, rejectPromise) => {
            let state;
            recognize(this.rootComponentType, this.config, url).mergeMap((newRouterStateSnapshot) => {
                return resolve(this.resolver, newRouterStateSnapshot);
            }).map((routerStateSnapshot) => {
                return createRouterState(routerStateSnapshot, this.currentRouterState);
            }).map((newState) => {
                state = newState;
            }).mergeMap(_ => {
                return new GuardChecks(state.snapshot, this.currentRouterState.snapshot, this.injector).check(this.outletMap);
            }).forEach((shouldActivate) => {
                if (!shouldActivate || id !== this.navigationId) {
                    this.routerEvents.next(new NavigationCancel(id, url));
                    return Promise.resolve(false);
                }
                new ActivateRoutes(state, this.currentRouterState).activate(this.outletMap);
                this.currentUrlTree = url;
                this.currentRouterState = state;
                if (!pop) {
                    this.location.go(this.urlSerializer.serialize(url));
                }
            }).then(() => {
                this.routerEvents.next(new NavigationEnd(id, url));
                resolvePromise(true);
            }, e => {
                this.routerEvents.next(new NavigationError(id, url, e));
                rejectPromise(e);
            });
        });
    }
}
class CanActivate {
    constructor(route) {
        this.route = route;
    }
}
class CanDeactivate {
    constructor(component, route) {
        this.component = component;
        this.route = route;
    }
}
class GuardChecks {
    constructor(future, curr, injector) {
        this.future = future;
        this.curr = curr;
        this.injector = injector;
        this.checks = [];
    }
    check(parentOutletMap) {
        const futureRoot = this.future._root;
        const currRoot = this.curr ? this.curr._root : null;
        this.traverseChildRoutes(futureRoot, currRoot, parentOutletMap);
        if (this.checks.length === 0)
            return of(true);
        return forkJoin(this.checks.map(s => {
            if (s instanceof CanActivate) {
                return this.runCanActivate(s.route);
            }
            else if (s instanceof CanDeactivate) {
                return this.runCanDeactivate(s.component, s.route);
            }
            else {
                throw new Error("Cannot be reached");
            }
        })).map(and);
    }
    traverseChildRoutes(futureNode, currNode, outletMap) {
        const prevChildren = nodeChildrenAsMap(currNode);
        futureNode.children.forEach(c => {
            this.traverseRoutes(c, prevChildren[c.value.outlet], outletMap);
            delete prevChildren[c.value.outlet];
        });
        forEach(prevChildren, (v, k) => this.deactivateOutletAndItChildren(v, outletMap._outlets[k]));
    }
    traverseRoutes(futureNode, currNode, parentOutletMap) {
        const future = futureNode.value;
        const curr = currNode ? currNode.value : null;
        const outlet = parentOutletMap ? parentOutletMap._outlets[futureNode.value.outlet] : null;
        if (curr && future._routeConfig === curr._routeConfig) {
            if (!shallowEqual(future.params, curr.params)) {
                this.checks.push(new CanDeactivate(outlet.component, curr), new CanActivate(future));
            }
            this.traverseChildRoutes(futureNode, currNode, outlet ? outlet.outletMap : null);
        }
        else {
            this.deactivateOutletAndItChildren(curr, outlet);
            this.checks.push(new CanActivate(future));
            this.traverseChildRoutes(futureNode, null, outlet ? outlet.outletMap : null);
        }
    }
    deactivateOutletAndItChildren(route, outlet) {
        if (outlet && outlet.isActivated) {
            forEach(outlet.outletMap._outlets, (v, k) => this.deactivateOutletAndItChildren(v, outlet.outletMap._outlets[k]));
            this.checks.push(new CanDeactivate(outlet.component, route));
        }
    }
    runCanActivate(future) {
        const canActivate = future._routeConfig ? future._routeConfig.canActivate : null;
        if (!canActivate || canActivate.length === 0)
            return of(true);
        return forkJoin(canActivate.map(c => {
            const guard = this.injector.get(c);
            if (guard.canActivate) {
                return wrapIntoObservable(guard.canActivate(future, this.future));
            }
            else {
                return wrapIntoObservable(guard(future, this.future));
            }
        })).map(and);
    }
    runCanDeactivate(component, curr) {
        const canDeactivate = curr._routeConfig ? curr._routeConfig.canDeactivate : null;
        if (!canDeactivate || canDeactivate.length === 0)
            return of(true);
        return forkJoin(canDeactivate.map(c => {
            const guard = this.injector.get(c);
            if (guard.canDeactivate) {
                return wrapIntoObservable(guard.canDeactivate(component, curr, this.curr));
            }
            else {
                return wrapIntoObservable(guard(component, curr, this.curr));
            }
        })).map(and);
    }
}
function wrapIntoObservable(value) {
    if (value instanceof Observable) {
        return value;
    }
    else {
        return of(value);
    }
}
class ActivateRoutes {
    constructor(futureState, currState) {
        this.futureState = futureState;
        this.currState = currState;
    }
    activate(parentOutletMap) {
        const futureRoot = this.futureState._root;
        const currRoot = this.currState ? this.currState._root : null;
        pushQueryParamsAndFragment(this.futureState);
        this.activateChildRoutes(futureRoot, currRoot, parentOutletMap);
    }
    activateChildRoutes(futureNode, currNode, outletMap) {
        const prevChildren = nodeChildrenAsMap(currNode);
        futureNode.children.forEach(c => {
            this.activateRoutes(c, prevChildren[c.value.outlet], outletMap);
            delete prevChildren[c.value.outlet];
        });
        forEach(prevChildren, (v, k) => this.deactivateOutletAndItChildren(outletMap._outlets[k]));
    }
    activateRoutes(futureNode, currNode, parentOutletMap) {
        const future = futureNode.value;
        const curr = currNode ? currNode.value : null;
        const outlet = getOutlet(parentOutletMap, futureNode.value);
        if (future === curr) {
            advanceActivatedRoute(future);
            this.activateChildRoutes(futureNode, currNode, outlet.outletMap);
        }
        else {
            this.deactivateOutletAndItChildren(outlet);
            const outletMap = new RouterOutletMap();
            this.activateNewRoutes(outletMap, future, outlet);
            this.activateChildRoutes(futureNode, null, outletMap);
        }
    }
    activateNewRoutes(outletMap, future, outlet) {
        const resolved = ReflectiveInjector.resolve([
            { provide: ActivatedRoute, useValue: future },
            { provide: RouterOutletMap, useValue: outletMap }
        ]);
        outlet.activate(future._futureSnapshot._resolvedComponentFactory, resolved, outletMap);
        advanceActivatedRoute(future);
    }
    deactivateOutletAndItChildren(outlet) {
        if (outlet && outlet.isActivated) {
            forEach(outlet.outletMap._outlets, (v, k) => this.deactivateOutletAndItChildren(v));
            outlet.deactivate();
        }
    }
}
function pushQueryParamsAndFragment(state) {
    if (!shallowEqual(state.snapshot.queryParams, state.queryParams.value)) {
        state.queryParams.next(state.snapshot.queryParams);
    }
    if (state.snapshot.fragment !== state.fragment.value) {
        state.fragment.next(state.snapshot.fragment);
    }
}
function nodeChildrenAsMap(node) {
    return node ?
        node.children.reduce((m, c) => {
            m[c.value.outlet] = c;
            return m;
        }, {}) :
        {};
}
function getOutlet(outletMap, route) {
    let outlet = outletMap._outlets[route.outlet];
    if (!outlet) {
        if (route.outlet === PRIMARY_OUTLET) {
            throw new Error(`Cannot find primary outlet`);
        }
        else {
            throw new Error(`Cannot find the outlet ${route.outlet}`);
        }
    }
    return outlet;
}
//# sourceMappingURL=data:application/json;base64,